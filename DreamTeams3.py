##################### ---- ФУНКЦИИ ---- ##############################

# Задание 1:
# Спросите у пользователя строку НА Английском или целое предложение и
# удалите все глассные буквы там.
# То что осталось от строки выведите на экран.
# Строка не должна быть короче 10 символов.

# import string
# aa = input('let:')
#
# def remove_vowel(a):
#     for i in a.lower():
#         if i in string.ascii_lowercase and len(a) >= 10:
#             for j in "aeiouAEIOU":
#                 a = a.replace(j, "")
#             return a
#         else:
#             return ('Недопустимое кол-во символов либо выбран не английский язык')
#
#
# print(remove_vowel(aa))




# Задание 2:
# Вам дан набор данных accounts.
# Функция должна проходить по каждому листу состоящему из 3-х символов и
# найти ту где их сумма больше всего.

# accounts = [
#     [[1,5,5],[7,4,5],[1,3,5],[2,1,5],[7,3,9],[8,3,5],[1,5,0],[7,3,2],[9,3,5]],
#     [[1,5,3],[2,7,3],[6,3,5],[1,5,9],[7,3,3],[3,5,4],[1,5,6],[7,3,6],[3,5,8]],
#     [[1,5,3],[7,3,0],[3,5,4],[1,5,6],[7,3,2],[3,5,4],[1,5,9],[7,3,2],[3,5,0]],
#     [[1,5,1],[7,3,2],[3,5,3],[1,5,4],[7,3,5],[3,5,6],[1,5,7],[7,3,8],[3,5,9]],
# ]

#######################################
# Задание 3:
# Вам даны 2 листа:

# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']

# Напишите функцию которая их принимает и сравнивает на равность.
# Пример где листы равны:

    # a + bc + de = abcde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['1', '23', 'abcde']

# Пример где листы НЕ равны:

    # a + cb + de = acbde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['123', 'de', 'abc']

# def compare_lists(l1, l2):
#     str1=''
#     str2 =''
#     for i in l1:
#         str1 += i
#     for j in l2:
#         str2 += j
#     if str1 == str2:
#         return 'равны'
#     else:
#         return 'ooops, не равны'
#
#
#
# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']
# print(compare_lists(list_1, list_2))
#

# Задание 7:
# Вам дан TUPLE и пустая Dictionary:

# pairs = {}

# В Tuple перечислены элементы, где идёт строгая очерёдность STRING и INTEGER.
# То есть если перед вами элемент типа данных STRING то следующий точно INTEGER и наоборот.
# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6 'six', 7, 'seven', 'eight', 8, 'nine',9, 10, 'ten', 11, '11', 12 ,'13')
# Проходя по TUPLE необходимо брать элементы по парно, один элемент может относиться только и только к одной паре.
# Ваша задача выявить если элемент является типом данных string() то записывать его как ключ в Dictionary -> pairs.

# Пример:
# pairs ={'one': 1, 'two': 2, 'three': 3, ...}

# def get_pairs():
#     keyList=[]
#     valList=[]
#     keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6,
#                    'six', 7, 'seven', 'eight', 8, 'nine', 9, 10, 'ten', 11, '11', 12, '13')
#     dic = dict()
#     for i in keys_values:
#         if isinstance(i, str):
#             keyList.append(i)
#         else:
#             valList.append(i)
#     res = {keyList[i]: valList[i] for i in range(len(keyList))}
#     return res
#
#
# print(get_pairs())


################################################################################


# Задание 8:
# Создайте 2 функции input которые спрашивают пользовтеля:
# 1. Какой длины должно быть число.
# 2. Из каких цифр только должно состоять число.
# Если пользователь попросит сгенерировать число длиною меньше 7 символов, скажите что это слишком короткое число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь попросит сгенерировать число длиною больше 30 символов, скажите что это слишком длинное число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь введёт меньше чем 3 числа во втором input, скажите что он ввёл слишком мало значений и спросите снова.
# Во втором input числа будут вводиться строго либо через запятую либо через пробел.
# Если пользователь использовал и пробелы и запятые во втором input, скажите что он ввёл неправильные значения и спросите числа снова.
# После того как пользователь введёт вам оба верных значения:
# сгенерируйте ему число длиною как он попросил и состоящее только из тех чисел которые он указал.

# Пример:
# Какой длины должно быть число: 7
# Какие цифры только должны присутствовать: 2,3,5,0,1

# Результат:
# 2201550

# Какой длины должно быть число: 9
# Какие цифры только должны присутствовать: 2 7 5

# Результат:
# 275727572

# import random
# def input1():
#     l=[]
#     randomL = []
#     while True:
#         dlina = int(input('число: '))
#         c = int(input('цифры: '))
#         if len(str(dlina)) < 7:
#             print('слишком короткое')
#
#         elif len(str(dlina)) > 30:
#             print('слишком велико')
#         elif len(str(c)) < 3:
#             print('маловато будет для цифр')
#         elif len(str(c)) > 3:
#             l.append(c)
#         else:
#             for i in range(dlina):
#                 n = random.randint(c)
#                 randomL.append(n)
#


# a = input('введите число:\n')
# b = input('цифры в числе:\n')
#input1()
# def input2(b):



# Задание 9:
# Попросить пользователя ввести текст.В результате
# вывести процент букв в верхнем регистре(заглавные)
# и в нижнем регистре(прописные)

# a = input('')
#
# def usersProc(text):
#     resUpper = [j for j in text if j.isupper()]
#     resLower = [l for l in text if l.islower()]
#     procUpper = (len(resUpper)*100)/len(text.replace(' ', ''))
#     procLower = (len(resLower)*100)/len(text.replace(' ', ''))
#
#     return f"процент в верхнем регистре: {procUpper}, процент в нижнем: {procLower}"
#
#
#
# print(usersProc(a))




# Задание 5:+
# Вам дан SET значений:

# uniques = {3,13,15,27,1,4,8,23,19,12,9,2,17}

# Создайте функцию которая:
# Удалите все чётные значения внутри SET, а оставшиеся отсортирует по убыванию.
# В результате, ваша функция должна вернуть отсортированный SET и неважно, каким будет SET растопленным или замороженным.


# uniques = {3, 13, 15, 27, 1, 4, 8, 23, 19, 12, 9, 2, 17}
#
# def chet(uniques):
#     list = []
#     for i in uniques.copy():
#         if i % 2 == 0:
#             uniques.remove(i)
#         else:
#             list.append(i)
#     x = list[::-1]
#     return sorted(uniques, reverse=True)
#
#
# print(chet(uniques))

# Задание 6: +
# В Python есть такой тип Данных как Boolean...
# Создайте TUPLE который ТЕХНИЧЕСКИ состоит из 4 Булевых ЗНАЧЕНИЙ.

# myTyple = (True, False, True, False)
# print(myTyple)

###################################################################################
# Задание 10:+
# Если вы были на Луне сейчас, ваш вес будет 16,5% от вашего веса земли.
# Для его расчета необходимо умножить на 0,165.
# Если в ближайшие 15 лет ваш вес будет увеличиваться на 1 кг каждый год.
# Какой будет ваш вес каждый год на Луне в следующем 15 лет?

#
# def Ves():
#     ves = float(input('Ваш вес сейчас : '))
#     ves_na_lune = ves * 0.165
#     print("Ваш вес на Луне " + str(ves_na_lune) + " кг")
#     for i in range(15):
#         ves += 1
#         ves_na_lune = ves * 0.165
#         x = str(i + 1) + ") Вес на Земле = " + str(ves) + " кг | Вес на Луне = " + str(ves_na_lune) + " кг"
#         return x
#
# print(Ves())



# Задание 11:+
# Попросить пользователя ввести слова через пробел.
# Отсортировать слова по количеству символов и вывести на экран результат.

# Пример input: сон машина стол книга девочка
# Результат: сон стол книга машина девочка

#
# def count_symbols(text):
#     mys = []
#     s = ''
#     dic = {}
#     for i in text:
#         mys.append(i)
#     for u in mys:
#         dic[u] = len(u)
#     x = sorted((value,key) for (key,value) in dic.items())
#     for i in x:
#         s += str(i[1])
#     return s.split()
#
#
#
#
#
#
#
# a = input('vvedite ').split('!')
# print(count_symbols(a))

# Задание 12:+
# Напишите функцию который будет конвертировать Фаренгейт в Цельсии и
# наоборот.

# def conv(c):
#     f = 5/9 * (c - 32)
#     return f
#
# f = float(input('введите '))
# print(conv(f))


import requests
from bs4 import BeautifulSoup

req = requests.get("https://kloop.kg/").content
soup = BeautifulSoup(req, 'html.parser')
div = soup.find_all('div', class_='elementor-post__text')
for i in div[5:8]:
    f = i.find_next('h3').find('a').text
    print(f)
